// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/swisscom/korp/docker_utils"
	"github.com/swisscom/korp/io"
	"sigs.k8s.io/kustomize/pkg/image"
	"sync"
)

var (
	lockPullPushIoMockLoadKustomizationFile sync.RWMutex
	lockPullPushIoMockOpenDockerClient      sync.RWMutex
)

// Ensure, that PullPushIoMock does implement PullPushIo.
// If this is not the case, regenerate this file with moq.
var _ io.PullPushIo = &PullPushIoMock{}

// PullPushIoMock is a mock implementation of PullPushIo.
//
//     func TestSomethingThatUsesPullPushIo(t *testing.T) {
//
//         // make and configure a mocked PullPushIo
//         mockedPullPushIo := &PullPushIoMock{
//             LoadKustomizationFileFunc: func(kstPath string) ([]image.Image, error) {
// 	               panic("mock out the LoadKustomizationFile method")
//             },
//             OpenDockerClientFunc: func() (docker_utils.DockerClient, error) {
// 	               panic("mock out the OpenDockerClient method")
//             },
//         }
//
//         // use mockedPullPushIo in code that requires PullPushIo
//         // and then make assertions.
//
//     }
type PullPushIoMock struct {
	// LoadKustomizationFileFunc mocks the LoadKustomizationFile method.
	LoadKustomizationFileFunc func(kstPath string) ([]image.Image, error)

	// OpenDockerClientFunc mocks the OpenDockerClient method.
	OpenDockerClientFunc func() (docker_utils.DockerClient, error)

	// calls tracks calls to the methods.
	calls struct {
		// LoadKustomizationFile holds details about calls to the LoadKustomizationFile method.
		LoadKustomizationFile []struct {
			// KstPath is the kstPath argument value.
			KstPath string
		}
		// OpenDockerClient holds details about calls to the OpenDockerClient method.
		OpenDockerClient []struct {
		}
	}
}

// LoadKustomizationFile calls LoadKustomizationFileFunc.
func (mock *PullPushIoMock) LoadKustomizationFile(kstPath string) ([]image.Image, error) {
	if mock.LoadKustomizationFileFunc == nil {
		panic("PullPushIoMock.LoadKustomizationFileFunc: method is nil but PullPushIo.LoadKustomizationFile was just called")
	}
	callInfo := struct {
		KstPath string
	}{
		KstPath: kstPath,
	}
	lockPullPushIoMockLoadKustomizationFile.Lock()
	mock.calls.LoadKustomizationFile = append(mock.calls.LoadKustomizationFile, callInfo)
	lockPullPushIoMockLoadKustomizationFile.Unlock()
	return mock.LoadKustomizationFileFunc(kstPath)
}

// LoadKustomizationFileCalls gets all the calls that were made to LoadKustomizationFile.
// Check the length with:
//     len(mockedPullPushIo.LoadKustomizationFileCalls())
func (mock *PullPushIoMock) LoadKustomizationFileCalls() []struct {
	KstPath string
} {
	var calls []struct {
		KstPath string
	}
	lockPullPushIoMockLoadKustomizationFile.RLock()
	calls = mock.calls.LoadKustomizationFile
	lockPullPushIoMockLoadKustomizationFile.RUnlock()
	return calls
}

// OpenDockerClient calls OpenDockerClientFunc.
func (mock *PullPushIoMock) OpenDockerClient() (docker_utils.DockerClient, error) {
	if mock.OpenDockerClientFunc == nil {
		panic("PullPushIoMock.OpenDockerClientFunc: method is nil but PullPushIo.OpenDockerClient was just called")
	}
	callInfo := struct {
	}{}
	lockPullPushIoMockOpenDockerClient.Lock()
	mock.calls.OpenDockerClient = append(mock.calls.OpenDockerClient, callInfo)
	lockPullPushIoMockOpenDockerClient.Unlock()
	return mock.OpenDockerClientFunc()
}

// OpenDockerClientCalls gets all the calls that were made to OpenDockerClient.
// Check the length with:
//     len(mockedPullPushIo.OpenDockerClientCalls())
func (mock *PullPushIoMock) OpenDockerClientCalls() []struct {
} {
	var calls []struct {
	}
	lockPullPushIoMockOpenDockerClient.RLock()
	calls = mock.calls.OpenDockerClient
	lockPullPushIoMockOpenDockerClient.RUnlock()
	return calls
}
