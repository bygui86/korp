// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/swisscom/korp/scan"
	"os"
	"sync"
)

var (
	lockIoMockListYamlFilesPaths sync.RWMutex
	lockIoMockReadFile           sync.RWMutex
	lockIoMockWriteFile          sync.RWMutex
)

// Ensure, that IoMock does implement Io.
// If this is not the case, regenerate this file with moq.
var _ scan.Io = &IoMock{}

// IoMock is a mock implementation of Io.
//
//     func TestSomethingThatUsesIo(t *testing.T) {
//
//         // make and configure a mocked Io
//         mockedIo := &IoMock{
//             ListYamlFilesPathsFunc: func(rootPath string) ([]string, error) {
// 	               panic("mock out the ListYamlFilesPaths method")
//             },
//             ReadFileFunc: func(filename string) ([]byte, error) {
// 	               panic("mock out the ReadFile method")
//             },
//             WriteFileFunc: func(filename string, data []byte, perm os.FileMode) error {
// 	               panic("mock out the WriteFile method")
//             },
//         }
//
//         // use mockedIo in code that requires Io
//         // and then make assertions.
//
//     }
type IoMock struct {
	// ListYamlFilesPathsFunc mocks the ListYamlFilesPaths method.
	ListYamlFilesPathsFunc func(rootPath string) ([]string, error)

	// ReadFileFunc mocks the ReadFile method.
	ReadFileFunc func(filename string) ([]byte, error)

	// WriteFileFunc mocks the WriteFile method.
	WriteFileFunc func(filename string, data []byte, perm os.FileMode) error

	// calls tracks calls to the methods.
	calls struct {
		// ListYamlFilesPaths holds details about calls to the ListYamlFilesPaths method.
		ListYamlFilesPaths []struct {
			// RootPath is the rootPath argument value.
			RootPath string
		}
		// ReadFile holds details about calls to the ReadFile method.
		ReadFile []struct {
			// Filename is the filename argument value.
			Filename string
		}
		// WriteFile holds details about calls to the WriteFile method.
		WriteFile []struct {
			// Filename is the filename argument value.
			Filename string
			// Data is the data argument value.
			Data []byte
			// Perm is the perm argument value.
			Perm os.FileMode
		}
	}
}

// ListYamlFilesPaths calls ListYamlFilesPathsFunc.
func (mock *IoMock) ListYamlFilesPaths(rootPath string) ([]string, error) {
	if mock.ListYamlFilesPathsFunc == nil {
		panic("IoMock.ListYamlFilesPathsFunc: method is nil but Io.ListYamlFilesPaths was just called")
	}
	callInfo := struct {
		RootPath string
	}{
		RootPath: rootPath,
	}
	lockIoMockListYamlFilesPaths.Lock()
	mock.calls.ListYamlFilesPaths = append(mock.calls.ListYamlFilesPaths, callInfo)
	lockIoMockListYamlFilesPaths.Unlock()
	return mock.ListYamlFilesPathsFunc(rootPath)
}

// ListYamlFilesPathsCalls gets all the calls that were made to ListYamlFilesPaths.
// Check the length with:
//     len(mockedIo.ListYamlFilesPathsCalls())
func (mock *IoMock) ListYamlFilesPathsCalls() []struct {
	RootPath string
} {
	var calls []struct {
		RootPath string
	}
	lockIoMockListYamlFilesPaths.RLock()
	calls = mock.calls.ListYamlFilesPaths
	lockIoMockListYamlFilesPaths.RUnlock()
	return calls
}

// ReadFile calls ReadFileFunc.
func (mock *IoMock) ReadFile(filename string) ([]byte, error) {
	if mock.ReadFileFunc == nil {
		panic("IoMock.ReadFileFunc: method is nil but Io.ReadFile was just called")
	}
	callInfo := struct {
		Filename string
	}{
		Filename: filename,
	}
	lockIoMockReadFile.Lock()
	mock.calls.ReadFile = append(mock.calls.ReadFile, callInfo)
	lockIoMockReadFile.Unlock()
	return mock.ReadFileFunc(filename)
}

// ReadFileCalls gets all the calls that were made to ReadFile.
// Check the length with:
//     len(mockedIo.ReadFileCalls())
func (mock *IoMock) ReadFileCalls() []struct {
	Filename string
} {
	var calls []struct {
		Filename string
	}
	lockIoMockReadFile.RLock()
	calls = mock.calls.ReadFile
	lockIoMockReadFile.RUnlock()
	return calls
}

// WriteFile calls WriteFileFunc.
func (mock *IoMock) WriteFile(filename string, data []byte, perm os.FileMode) error {
	if mock.WriteFileFunc == nil {
		panic("IoMock.WriteFileFunc: method is nil but Io.WriteFile was just called")
	}
	callInfo := struct {
		Filename string
		Data     []byte
		Perm     os.FileMode
	}{
		Filename: filename,
		Data:     data,
		Perm:     perm,
	}
	lockIoMockWriteFile.Lock()
	mock.calls.WriteFile = append(mock.calls.WriteFile, callInfo)
	lockIoMockWriteFile.Unlock()
	return mock.WriteFileFunc(filename, data, perm)
}

// WriteFileCalls gets all the calls that were made to WriteFile.
// Check the length with:
//     len(mockedIo.WriteFileCalls())
func (mock *IoMock) WriteFileCalls() []struct {
	Filename string
	Data     []byte
	Perm     os.FileMode
} {
	var calls []struct {
		Filename string
		Data     []byte
		Perm     os.FileMode
	}
	lockIoMockWriteFile.RLock()
	calls = mock.calls.WriteFile
	lockIoMockWriteFile.RUnlock()
	return calls
}
